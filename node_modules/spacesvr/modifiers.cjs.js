'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
require('@react-three/drei');
var reactThreeFiber = require('react-three-fiber');

var environmentStateContext = /*#__PURE__*/react.createContext({});
function useEnvironment() {
  return react.useContext(environmentStateContext);
}

/**
 *
 * Interactible adds on click and hover methods to any group of Object3D's
 *
 * @param props
 * @constructor
 */
var Interactable = function Interactable(props) {
  var children = props.children,
      onClick = props.onClick,
      onHover = props.onHover,
      onUnHover = props.onUnHover;

  var _useEnvironment = useEnvironment(),
      player = _useEnvironment.player;

  var raycaster = player.raycaster;
  var group = react.useRef();

  var _useState = react.useState(false),
      hovered = _useState[0],
      setHovered = _useState[1];

  reactThreeFiber.useFrame(function () {
    if (group.current && raycaster) {
      var intersections = raycaster.intersectObject(group.current, true);

      if (intersections && intersections.length > 0) {
        if (!hovered) {
          setHovered(true);

          if (onHover) {
            onHover();
          }
        }
      } else if (hovered) {
        setHovered(false);

        if (onUnHover) {
          onUnHover();
        }
      }
    }
  });
  react.useEffect(function () {
    var checkClick = function checkClick() {
      if (hovered && onClick) {
        onClick();
      }
    };

    document.addEventListener("click", checkClick);
    return function () {
      document.removeEventListener("click", checkClick);
    };
  }, [hovered, onClick]);
  return /*#__PURE__*/React.createElement("group", {
    ref: group
  }, children);
};

var Floating = function Floating(props) {
  var children = props.children,
      _props$height = props.height,
      height = _props$height === void 0 ? 0.2 : _props$height,
      _props$speed = props.speed,
      speed = _props$speed === void 0 ? 1 : _props$speed;
  var group = react.useRef();
  var seed = react.useRef(Math.random());
  reactThreeFiber.useFrame(function (_ref) {
    var clock = _ref.clock;

    if (group.current) {
      group.current.position.y = height * Math.sin(clock.getElapsedTime() * speed * 0.4 + seed.current * 10000);
    }
  });
  return /*#__PURE__*/React.createElement("group", {
    ref: group
  }, children);
};

exports.Floating = Floating;
exports.Interactable = Interactable;
import React from "react";