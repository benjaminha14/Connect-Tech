import { createContext, useContext, useState, useRef, useCallback, useEffect } from 'react';
import { useProgress, useGLTF } from '@react-three/drei';
import _extends from '@babel/runtime/helpers/esm/extends';
import _taggedTemplateLiteralLoose from '@babel/runtime/helpers/esm/taggedTemplateLiteralLoose';
import { keyframes, css, Global } from '@emotion/core';
import styled from '@emotion/styled';
import { useSphere, usePlane, Physics } from '@react-three/cannon';
import { useThree, useFrame, extend, Canvas } from 'react-three-fiber';
import { Vector2, Euler, Vector3, Raycaster, Quaternion } from 'three';
import { isMobile } from 'react-device-detect';
import nipplejs from 'nipplejs';
import { PointerLockControls } from 'three/examples/jsm/controls/PointerLockControls';
import 'three/examples/jsm/helpers/PositionalAudioHelper';
import 'three/examples/jsm/loaders/RGBELoader';
import 'shopify-buy';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
import { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader';
import { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';
import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';
import styled$1 from '@emotion/styled/';
import fetch from 'node-fetch';
import { DeviceOrientationControls } from 'three/examples/jsm/controls/DeviceOrientationControls';

const environmentStateContext = /*#__PURE__*/createContext({});
function useEnvironment() {
  return useContext(environmentStateContext);
}
function useEnvironmentState() {
  const [paused, setPausedState] = useState(true);
  const [overlay, setOverlayState] = useState(null);
  const container = useRef(null);
  const events = useRef([]);
  const player = useRef({});
  const setPaused = useCallback((p, o) => {
    setPausedState(p);

    if (!p) {
      // if unpausing, set paused overlay to undefined by default
      setOverlayState(o || null);
    }

    if (p && o) {
      // if pausing, only set closed overlay if passed ins
      setOverlayState(o);
    }

    events.current.map(ev => {
      if (ev.name === "paused") {
        ev.callback.apply(null, [p, o]);
      }
    });
  }, [events]);

  const setPlayer = p => {
    player.current = p;
  };

  const addEvent = useCallback((name, callback) => {
    const event = {
      name,
      callback
    };
    events.current.push(event);
  }, []);
  const context = {
    paused,
    overlay,
    player: player.current,
    containerRef: container,
    container: container.current,
    events: events.current,
    setPaused,
    setPlayer,
    addEvent
  };
  return context;
}
const useControlledProgress = () => {
  const TIMEOUT = 750;
  const {
    progress,
    total
  } = useProgress();
  const startTime = useRef(new Date());
  const controlledProgress = useRef(0);
  useEffect(() => {
    const newTime = new Date();
    const timeElapsed = newTime.getTime() - startTime.current.getTime();
    const diff = Math.min(progress - controlledProgress.current, timeElapsed < TIMEOUT ? 99 : 100);

    if (diff > 0) {
      controlledProgress.current = progress;
    }
  }, [progress]); // wait TIMEOUT (ms) to check if any objects are waiting to be loaded

  const [counter, setCounter] = useState(0);
  const [skip, setSkip] = useState(false);
  useEffect(() => {
    if (total > 0) {
      return;
    } else if (counter > 0) {
      setSkip(true);
    } else {
      setTimeout(() => setCounter(counter + 1), TIMEOUT);
    }
  }, [counter]);
  return skip ? 100 : Math.floor(controlledProgress.current);
};

function _templateObject3() {
  const data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  width: 90%;\n  height: 90%;\n  max-width: 500px;\n  max-height: 500px;\n  background-image: url(", ");\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  opacity: 0.4;\n  animation: ", " 7s ease-in-out infinite;\n"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteralLoose(["\n        0% {\n            transform: translate(-50%, -50%) translateY(0px)\n    }\n    \n        50% {\n            transform: translate(-50%, -50%) translateY(-15px)\n    }\n    \n        100% {\n            transform: translate(-50%, -50%) translateY(0px)\n    }\n"]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: 100%;\n  z-index: 9999;\n  background: white;\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}
const Container = styled.div(_templateObject());
const IMAGE_SRC = "https://d27rt3a60hh1lx.cloudfront.net/images/spaces-logo.png";
const float = keyframes(_templateObject2());
const Image = styled.div(_templateObject3(), IMAGE_SRC, float);
const INVALID_KEYWORDS = ["FBAN", "FBAV", "Instagram"];

const BrowserChecker = props => {
  const {
    children
  } = props;
  const [valid, setValid] = useState(true);
  useEffect(() => {
    const ua = navigator.userAgent || navigator.vendor || "";
    const valid = INVALID_KEYWORDS.filter(val => ua.includes(val));
    setValid(valid.length === 0);
  }, []);

  if (valid) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }

  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Image, null), "This browser cannot run our application.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Click those three dots at the top right", /*#__PURE__*/React.createElement("br", null), "to open in Safari or Chrome.");
};

function _templateObject$1() {
  const data = _taggedTemplateLiteralLoose(["\n  position: fixed;\n  top: 50vh;\n  left: 50vw;\n  z-index: 1;\n  mix-blend-mode: difference;\n\n  &::before {\n    content: \"\";\n    display: block;\n    height: 11px;\n    border-left: 1px solid #fff;\n    margin-bottom: -6px;\n  }\n\n  &::after {\n    content: \"\";\n    display: block;\n    width: 11px;\n    border-top: 1px solid #fff;\n    margin-left: -5px;\n  }\n"]);

  _templateObject$1 = function () {
    return data;
  };

  return data;
}
const Element = styled.div(_templateObject$1());

const Crosshair = () => {
  return /*#__PURE__*/React.createElement(Element, null);
};

const DefaultTouch = {
  pos: new Vector2(0, 0),
  id: -1
};
const DRAG_SENSITIVITY = new Vector2(0.7, 0.7);
/**
 * TouchFPSCamera controls the camera rotation by detecting
 * touch drag on the screen. Unlike MouseFPSCamera, this component
 * does not have a way to pause, that must be done externally.
 *
 * @param props
 * @constructor
 */

const TouchFPSCamera = props => {
  const {
    quaternion,
    position
  } = props;
  const touchStartPos = useRef(DefaultTouch);
  const originEuler = useRef(new Euler(0, 0, 0, "YXZ"));
  const {
    camera
  } = useThree();
  useFrame(() => {
    if (position.current) {
      var _camera$position;

      const {
        x: pX,
        y: pY,
        z: pZ
      } = position.current;
      camera == null ? void 0 : (_camera$position = camera.position) == null ? void 0 : _camera$position.set(pX, pY, pZ);
    }
  });

  const getNewEuler = (dragX, dragY) => {
    const newEuler = originEuler.current.clone();
    const moveX = dragX - touchStartPos.current.pos.x;
    const moveY = dragY - touchStartPos.current.pos.y;
    newEuler.setFromQuaternion(camera.quaternion);
    newEuler.y = originEuler.current.y - moveX * DRAG_SENSITIVITY.x / 100;
    newEuler.x = originEuler.current.x - moveY * DRAG_SENSITIVITY.y / 100;
    newEuler.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, newEuler.x));
    return newEuler;
  };

  const tappedNipple = ev => {
    // get the relevant touched element (casted as an Element)
    const ele = ev.touches[ev.touches.length - 1].target;
    return ele.classList.contains("nipple-container") || ele.classList.contains("front") || ele.classList.contains("back");
  };

  const getCurrentTouch = touches => {
    const len = touches.length;

    for (let i = 0; i < len; i++) {
      if (touchStartPos.current.id === touches[i].identifier) {
        return touches[i];
      }
    }

    return undefined;
  }; // touch move scripts


  const onTouchStart = ev => {
    if (touchStartPos.current.id !== -1) {
      return;
    }

    if (tappedNipple(ev)) {
      touchStartPos.current = DefaultTouch;
      return;
    } // get last in list (most recent touch) to not confuse with movement


    const touchIndex = ev.touches.length - 1;
    const {
      clientX,
      clientY,
      identifier: id
    } = ev.touches[touchIndex];
    touchStartPos.current = {
      pos: new Vector2(clientX, clientY),
      id
    };
  };

  const onTouchMove = ev => {
    const touch = getCurrentTouch(ev.touches);

    if (!touch) {
      return;
    }

    const {
      clientX,
      clientY
    } = touch;
    const newEuler = getNewEuler(clientX, clientY);
    camera.quaternion.setFromEuler(newEuler);
    quaternion.current = camera.quaternion;
  };

  const onTouchEnd = ev => {
    const touch = getCurrentTouch(ev.changedTouches);

    if (!touch) {
      return;
    }

    const {
      clientX,
      clientY
    } = touch;
    originEuler.current = getNewEuler(clientX, clientY);
    touchStartPos.current.id = -1;
  };

  useEffect(() => {
    camera == null ? void 0 : camera.lookAt(0, 2, 0);
    quaternion.current = camera.quaternion;
  }, []);
  useEffect(() => {
    document.addEventListener("touchstart", onTouchStart);
    document.addEventListener("touchmove", onTouchMove);
    document.addEventListener("touchend", onTouchEnd);
    return () => {
      document.removeEventListener("touchstart", onTouchStart);
      document.removeEventListener("touchmove", onTouchMove);
      document.removeEventListener("touchend", onTouchEnd);
    };
  }, []); // @ts-ignore

  return /*#__PURE__*/React.createElement(React.Fragment, null);
};

/**
 * NippleMovement gives the player a direction to move by taking
 * input from a nipple (joystick).
 *
 * Direction is stored as a Vector3 with the following format
 *    x: left/right movement, + for right
 *    y: forward/back movement, + for forwards
 *    z: up/down movement, + for up
 *
 * @param props
 * @constructor
 */
const NippleMovement = props => {
  const {
    direction,
    nippleContainer
  } = props;
  const nipple = useRef();
  const {
    container
  } = useEnvironment();
  useEffect(() => {
    if (container) {
      nippleContainer.current = document.createElement("divs");
      nippleContainer.current.style.position = "fixed";
      nippleContainer.current.style.left = "0";
      nippleContainer.current.style.bottom = "0";
      nippleContainer.current.style.width = "40%";
      nippleContainer.current.style.maxWidth = "160px";
      nippleContainer.current.style.height = "25%";
      nippleContainer.current.style.height = "160px";
      nippleContainer.current.style.zIndex = "5"; // add class identifier to nippleContainer to identify touchEvents

      nippleContainer.current.classList.add("nipple-container");
      container.appendChild(nippleContainer.current);
      nipple.current = nipplejs.create({
        zone: nippleContainer.current,
        mode: "static",
        position: {
          left: "50%",
          top: "50%"
        },
        color: "gray",
        size: 120,
        restOpacity: 0.5
      });
      nipple.current.on("move", (evt, data) => {
        direction.current.set(data.vector.x, -data.vector.y, 0);
      });
      nipple.current.on("end", () => {
        direction.current.set(0, 0, 0);
      });
      return () => {
        if (nipple.current) {
          nipple.current.destroy();
        }
      };
    }
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null);
};

const MobileControls = props => {
  const {
    direction,
    quaternion,
    position
  } = props;
  const nippleContainer = useRef(null);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NippleMovement, {
    direction: direction,
    nippleContainer: nippleContainer
  }), /*#__PURE__*/React.createElement(TouchFPSCamera, {
    quaternion: quaternion,
    position: position,
    nippleContainer: nippleContainer
  }));
};

/**
 * KeyboardMovement gives the player a direction to move by taking
 * input from any source (currently keyboard) and calculating
 * relative direction.
 *
 * Direction is stored as a Vector3 with the following format
 *    x: left/right movement, + for right
 *    y: forward/back movement, + for forwards
 *    z: up/down movement, + for up
 *
 * @param props
 * @constructor
 */
const KeyboardMovement = props => {
  const {
    direction
  } = props;
  const pressedKeys = useRef([false, false, false, false]); // key events

  const calcDirection = () => {
    const press = pressedKeys.current; // [w, a, s, d]

    const yAxis = -1 * Number(press[0]) + Number(press[2]);
    const xAxis = -1 * Number(press[1]) + Number(press[3]);
    return new Vector3(xAxis, yAxis, 0);
  };

  const onKeyDown = ev => {
    if (ev.key === "w" || ev.key === "W" || ev.key === "ArrowUp") {
      pressedKeys.current[0] = true;
    }

    if (ev.key === "a" || ev.key === "A" || ev.key === "ArrowLeft") {
      pressedKeys.current[1] = true;
    }

    if (ev.key === "s" || ev.key === "S" || ev.key === "ArrowDown") {
      pressedKeys.current[2] = true;
    }

    if (ev.key === "d" || ev.key === "D" || ev.key === "ArrowRight") {
      pressedKeys.current[3] = true;
    }

    direction.current = calcDirection();
  };

  const onKeyUp = ev => {
    if (ev.key === "w" || ev.key === "W" || ev.key === "ArrowUp") {
      pressedKeys.current[0] = false;
    }

    if (ev.key === "a" || ev.key === "A" || ev.key === "ArrowLeft") {
      pressedKeys.current[1] = false;
    }

    if (ev.key === "s" || ev.key === "S" || ev.key === "ArrowDown") {
      pressedKeys.current[2] = false;
    }

    if (ev.key === "d" || ev.key === "D" || ev.key === "ArrowRight") {
      pressedKeys.current[3] = false;
    }

    direction.current = calcDirection();
  };

  useEffect(() => {
    document.addEventListener("keydown", onKeyDown);
    document.addEventListener("keyup", onKeyUp);
    return () => {
      document.removeEventListener("keydown", onKeyDown);
      document.removeEventListener("keyup", onKeyUp);
    };
  }, [onKeyUp, onKeyDown]);
  return /*#__PURE__*/React.createElement(React.Fragment, null);
};

extend({
  PointerLockControls
});

/**
 * MouseFPSCamera controls the camera rotation, set up as a first
 * person view. It takes care of user input to set the camera rotation
 * and passed the quaternion of the camera up. Its position is attached
 * to the passed position, probably the player's position.
 *
 * @param props
 * @constructor
 */
const MouseFPSCamera = props => {
  const {
    quaternion,
    position
  } = props;
  const {
    setPaused,
    paused,
    addEvent
  } = useEnvironment();
  const {
    camera,
    gl
  } = useThree();
  const controls = useRef();
  useFrame(() => {
    var _controls$current;

    if ((controls == null ? void 0 : (_controls$current = controls.current) == null ? void 0 : _controls$current.isLocked) === true) {
      const lookAt = new Vector3(0, 0, -1);
      lookAt.applyQuaternion(camera.quaternion);
      lookAt.multiply(new Vector3(1, 0, 1)).normalize();
      quaternion.current = camera.quaternion;
    }

    if (position.current) {
      var _camera$position;

      const {
        x: pX,
        y: pY,
        z: pZ
      } = position.current;
      camera == null ? void 0 : (_camera$position = camera.position) == null ? void 0 : _camera$position.set(pX, pY, pZ);
    }
  }); // pointer locking events

  const onLock = () => {
    // dont't need to set if it's already set
    if (paused) {
      setPaused(false);
    }
  };

  const onUnlock = () => {
    // dont't need to set if it's already set
    if (!paused) {
      setPaused(true);
    }
  };

  const lockCamera = () => {
    var _controls$current2;

    return controls == null ? void 0 : (_controls$current2 = controls.current) == null ? void 0 : _controls$current2.lock();
  };

  const unlockCamera = () => {
    var _controls$current3;

    return controls == null ? void 0 : (_controls$current3 = controls.current) == null ? void 0 : _controls$current3.unlock();
  };

  useEffect(() => {
    // initial camera rotation
    if (camera && quaternion) {
      camera == null ? void 0 : camera.lookAt(0, 2, 0);
      quaternion.current = camera.quaternion;
    } // lock and unlock controls based on set paused value


    addEvent("paused", (pausedVal, overlayVal) => {
      if (pausedVal) {
        unlockCamera();
      } else {
        lockCamera();
      }
    });
  }, []);
  useEffect(() => {
    var _controls$current5, _controls$current6;

    setTimeout(() => {
      var _controls$current4;

      if (!(controls == null ? void 0 : (_controls$current4 = controls.current) == null ? void 0 : _controls$current4.isLocked) && !paused) {
        setPaused(true);
      }
    }, 250);
    controls == null ? void 0 : (_controls$current5 = controls.current) == null ? void 0 : _controls$current5.addEventListener("lock", onLock);
    controls == null ? void 0 : (_controls$current6 = controls.current) == null ? void 0 : _controls$current6.addEventListener("unlock", onUnlock);
    return () => {
      var _controls$current7, _controls$current8;

      controls == null ? void 0 : (_controls$current7 = controls.current) == null ? void 0 : _controls$current7.removeEventListener("lock", onLock);
      controls == null ? void 0 : (_controls$current8 = controls.current) == null ? void 0 : _controls$current8.removeEventListener("unlock", onUnlock);
    };
  }, [paused, controls]); // @ts-ignore

  return /*#__PURE__*/React.createElement("pointerLockControls", {
    ref: controls,
    args: [camera, gl.domElement]
  });
};

const DesktopControls = props => {
  const {
    direction,
    quaternion,
    position
  } = props;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KeyboardMovement, {
    direction: direction
  }), /*#__PURE__*/React.createElement(MouseFPSCamera, {
    quaternion: quaternion,
    position: position
  }));
};

function createPlayerRef(bodyApi, position, velocity, lockControls, raycaster) {
  const posVec = {
    set: vec => bodyApi.position.set(vec.x, vec.y, vec.z),
    get: () => position.current
  };
  const velVec = {
    set: vec => bodyApi.velocity.set(vec.x, vec.y, vec.z),
    get: () => velocity.current
  };
  const controls = {
    lock: () => lockControls.current = true,
    unlock: () => lockControls.current = false,
    isLocked: () => lockControls.current
  };
  const playerRef = {
    position: posVec,
    velocity: velVec,
    controls,
    raycaster: raycaster.current
  };
  return playerRef;
}

const VELOCITY_FACTOR = 250;
const SHOW_PLAYER_HITBOX = false;

/**
 * Player represents a physics-enabled player in the environment, complete with a
 * control scheme and a physical representation that interacts with other physics-
 * enabled objects.
 *
 * There should only be one player per environment.
 *
 * @constructor
 */
const Player = props => {
  const {
    initPos = new Vector3(0, 1, 0),
    initRot = 0
  } = props;
  const {
    camera
  } = useThree();
  const {
    paused,
    setPlayer
  } = useEnvironment(); // physical body

  const [bodyRef, bodyApi] = useSphere(() => ({
    mass: 500,
    position: initPos.toArray(),
    args: 1,
    fixedRotation: true
  })); // producer

  const prevTime = useRef(performance.now());
  const position = useRef(new Vector3(0, 0, 0));
  const velocity = useRef(new Vector3(0, 0, 0));
  const lockControls = useRef(false);
  const raycaster = useRef(new Raycaster(new Vector3(), new Vector3(), 0, 3)); // consumer

  const direction = useRef(new Vector3());
  const quaternion = useRef(new Quaternion(0, 0, 0, 0)); // rad on y axis
  // setup player

  useEffect(() => {
    // store position and velocity
    bodyApi.position.subscribe(p => {
      position.current.set(p[0], p[1], p[2]);
    });
    bodyApi.velocity.subscribe(v => velocity.current.set(v[0], v[1], v[2]));
    const xLook = initPos.x + 100 * Math.cos(initRot);
    const zLook = initPos.z + 100 * Math.sin(initRot);
    camera == null ? void 0 : camera.lookAt(xLook, initPos.y, zLook);
    setPlayer(createPlayerRef(bodyApi, position, velocity, lockControls, raycaster));
  }, []); // update player every frame

  useFrame(() => {
    const time = performance.now(); // update raycaster

    if (position.current && quaternion.current) {
      raycaster.current.ray.origin.copy(position.current);
      const lookAt = new Vector3(0, 0, -1);
      lookAt.applyQuaternion(quaternion.current);
      raycaster.current.ray.direction.copy(lookAt);
    }

    if (paused) {
      // stop player from moving when paused
      bodyApi == null ? void 0 : bodyApi.velocity.set(0, 0, 0);
    } else {
      // get time since last computation
      const delta = (time - prevTime.current) / 1000; // get forward/back movement and left/right movement velocities

      const inputVelocity = new Vector3(0, 0, 0);

      if (!lockControls.current) {
        inputVelocity.x = direction.current.x * delta * 0.75 * VELOCITY_FACTOR;
        inputVelocity.z = direction.current.y * delta * VELOCITY_FACTOR;
      } // apply quaternion to get adjusted direction based on camera


      const moveQuaternion = quaternion.current.clone();
      moveQuaternion.x = 0;
      moveQuaternion.z = 0;
      inputVelocity.applyQuaternion(moveQuaternion); // keep y velocity intact and update velocity

      inputVelocity.add(new Vector3(0, velocity.current.y, 0));
      bodyApi == null ? void 0 : bodyApi.velocity.set(inputVelocity.x, inputVelocity.y, inputVelocity.z);
    }

    prevTime.current = time;
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, isMobile ? /*#__PURE__*/React.createElement(MobileControls, {
    quaternion: quaternion,
    position: position,
    direction: direction
  }) : /*#__PURE__*/React.createElement(DesktopControls, {
    quaternion: quaternion,
    position: position,
    direction: direction
  }), /*#__PURE__*/React.createElement("mesh", {
    ref: bodyRef,
    name: "player"
  }, SHOW_PLAYER_HITBOX ));
};

function _templateObject$2() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 200;\n  background: white;\n  transition: opacity 0.5s ease;\n  transition-delay: 0.25s;\n  opacity: ", ";\n  pointer-events: ", ";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n"]);

  _templateObject$2 = function () {
    return data;
  };

  return data;
}
const Container$1 = styled.div(_templateObject$2(), props => props.finished ? 0 : 1, props => props.finished ? "none" : "all");

const LoadingScreen = () => {
  const progress = useControlledProgress();
  return /*#__PURE__*/React.createElement(Container$1, {
    finished: progress == 100,
    landing: false
  }, progress, "%");
};

const InfinitePlane = props => {
  const {
    height,
    size = [100, 100],
    visible
  } = props;
  const [ref] = usePlane(() => ({
    rotation: [-Math.PI / 2, 0, 0],
    position: [0, height, 0],
    args: size,
    type: "Static"
  }));
  return /*#__PURE__*/React.createElement("mesh", {
    ref: ref
  }, visible && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("planeBufferGeometry", {
    attach: "geometry",
    args: size
  }), /*#__PURE__*/React.createElement("meshPhongMaterial", {
    attach: "material",
    color: "#660000"
  })));
};

const FILE_URL = "https://d27rt3a60hh1lx.cloudfront.net/models/SpacesSphere1/SpacesSphere1.glb";
useGLTF.preload(FILE_URL);

extend({
  EffectComposer,
  RenderPass,
  GlitchPass,
  ShaderPass,
  BloomPass
});
const RealisticEffects = () => {
  const {
    gl,
    scene,
    camera,
    size
  } = useThree();
  const gammaCorrection = new ShaderPass(GammaCorrectionShader);
  const fxaaPass = new ShaderPass(FXAAShader);
  const pixelRatio = window ? window.devicePixelRatio : 2; // @ts-ignore

  fxaaPass.material.uniforms["resolution"].value.x = 1 / (window.innerWidth * pixelRatio); // @ts-ignore

  fxaaPass.material.uniforms["resolution"].value.y = 1 / (window.innerHeight * pixelRatio);
  const composer = useRef();
  useEffect(() => {
    var _composer$current;

    return void (composer == null ? void 0 : (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height));
  }, [size]);
  useEffect(() => {
    var _composer$current2, _composer$current3;

    gammaCorrection.renderToScreen = true;
    composer == null ? void 0 : (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.addPass(gammaCorrection);
    fxaaPass.renderToScreen = true;
    composer == null ? void 0 : (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.addPass(fxaaPass);
  }, []);
  useFrame(() => {
    var _composer$current4;

    composer == null ? void 0 : (_composer$current4 = composer.current) == null ? void 0 : _composer$current4.render();
  }, 1);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("effectComposer", {
    ref: composer,
    args: [gl]
  }, /*#__PURE__*/React.createElement("renderPass", {
    attachArray: "passes",
    args: [scene, camera]
  })));
};

function _templateObject9() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: auto;\n  margin: 10px 0;\n  font-family: \"Space Mono\", monospace;\n  font-size: 0.7em;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n"]);

  _templateObject9 = function () {
    return data;
  };

  return data;
}

function _templateObject8() {
  const data = _taggedTemplateLiteralLoose(["\n  font-size: 2em;\n  text-align: center;\n  margin-bottom: 0em;\n  line-height: 1em;\n"]);

  _templateObject8 = function () {
    return data;
  };

  return data;
}

function _templateObject7() {
  const data = _taggedTemplateLiteralLoose(["\n  margin-top: 8%;\n  width: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: \"Lato\", sans-serif;\n"]);

  _templateObject7 = function () {
    return data;
  };

  return data;
}

function _templateObject6() {
  const data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: 24px;\n  left: 60px;\n  width: auto;\n  height: auto;\n  color: white;\n  cursor: pointer;\n  transition: opacity 0.15s linear;\n  font-size: 0.6em;\n  line-height: 1em;\n  :hover {\n    opacity: 0.5;\n  }\n"]);

  _templateObject6 = function () {
    return data;
  };

  return data;
}

function _templateObject5() {
  const data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: 24px;\n  right: 60px;\n  font-size: 0.6em;\n"]);

  _templateObject5 = function () {
    return data;
  };

  return data;
}

function _templateObject4() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 90%;\n  max-width: 400px;\n  height: auto;\n  cursor: pointer;\n  text-align: center;\n  font-size: 1.3em;\n  font-family: \"Lato\", sans-serif;\n  transition: opacity 0.15s linear;\n  margin-top: 20px;\n  background: white;\n  line-height: 1em;\n  padding: 12px 0;\n  border-radius: 10px;\n  :hover {\n    opacity: 0.5;\n  }\n"]);

  _templateObject4 = function () {
    return data;
  };

  return data;
}

function _templateObject3$1() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 90%;\n  max-width: 400px;\n  height: 91vw;\n  max-height: 400px;\n  padding: 20px 20px;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  border-radius: 3%;\n  background-image: url(\"https://spaces-gallery-assets.s3-us-west-1.amazonaws.com/images/pauseMenuBg.png\");\n  background-position: center;\n  background-size: cover;\n"]);

  _templateObject3$1 = function () {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n"]);

  _templateObject2$1 = function () {
    return data;
  };

  return data;
}

function _templateObject$3() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  transition: opacity 0.25s ease;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  opacity: ", ";\n  pointer-events: ", ";\n"]);

  _templateObject$3 = function () {
    return data;
  };

  return data;
}
const {
  NEXT_PUBLIC_VERSION
} = process.env;
const Container$2 = styled.div(_templateObject$3(), props => props.paused ? 1 : 0, props => props.paused ? "all" : "none");
const ClickContainer = styled.div(_templateObject2$1());
const Window = styled.div(_templateObject3$1());
const Continue = styled.div(_templateObject4());
const Version = styled.a(_templateObject5());
const Instagram = styled.div(_templateObject6());
const Header = styled.div(_templateObject7());
const Title = styled.div(_templateObject8());
const Text = styled.div(_templateObject9());

const DesktopPause = () => {
  const {
    paused,
    overlay,
    setPaused
  } = useEnvironment();

  const closeOverlay = () => setPaused(false);

  if (overlay) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Container$2, {
    paused: paused
  }, /*#__PURE__*/React.createElement(ClickContainer, {
    onClick: closeOverlay
  }), /*#__PURE__*/React.createElement(Window, null, /*#__PURE__*/React.createElement(Version, null, "v ", NEXT_PUBLIC_VERSION), /*#__PURE__*/React.createElement(Instagram, {
    onClick: () => {
      window.open("https://www.instagram.com/spaces3.0");
    }
  }, "@spaces3.0"), /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Title, null, "SPACES")), /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement("p", null, "Move around: ", isMobile ? "Joystick" : "W/A/S/D"), /*#__PURE__*/React.createElement("p", null, "Look around: ", isMobile ? "Drag" : "Mouse"), /*#__PURE__*/React.createElement("p", null, "Pause: ", isMobile ? "Menu Button" : "Esc"))), /*#__PURE__*/React.createElement(Continue, {
    onClick: closeOverlay
  }, "continue"));
};

function _templateObject3$2() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 60px;\n  height: 60px;\n  margin: 10px;\n  border-radius: 50%;\n  text-align: center;\n  background: url(\"https://spaces-gallery-assets.s3-us-west-1.amazonaws.com/images/spacesLogoReal.png\")\n    center center no-repeat;\n  background-size: cover;\n"]);

  _templateObject3$2 = function () {
    return data;
  };

  return data;
}

function _templateObject2$2() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 10;\n"]);

  _templateObject2$2 = function () {
    return data;
  };

  return data;
}

function _templateObject$4() {
  const data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 9;\n"]);

  _templateObject$4 = function () {
    return data;
  };

  return data;
}
const Container$3 = styled.div(_templateObject$4());
const ClickContainer$1 = styled.div(_templateObject2$2());
const Window$1 = styled.div(_templateObject3$2());

const MobilePause = () => {
  const {
    paused,
    setPaused
  } = useEnvironment();

  const togglePause = () => setPaused(!paused);

  return /*#__PURE__*/React.createElement(Container$3, {
    paused: paused
  }, /*#__PURE__*/React.createElement(ClickContainer$1, {
    onClick: togglePause
  }), !paused ? /*#__PURE__*/React.createElement(Window$1, null) : null);
};

function _templateObject$5() {
  const data = _taggedTemplateLiteralLoose(["\n  @font-face {\n    font-family: \"MyriadPro\";\n    src: url(\"https://d27rt3a60hh1lx.cloudfront.net/fonts/Myriad_Pro_Light.otf\");\n  }\n\n  @font-face {\n    font-family: \"Lomino\";\n    src: url(\"https://d27rt3a60hh1lx.cloudfront.net/fonts/LominoUI_A_Rg.ttf\");\n  }\n\n  html {\n    position: fixed;\n    height: 100%;\n    overflow: hidden;\n  }\n\n  body {\n    margin: 0;\n    width: 100vw;\n    height: 100vh;\n    user-select: none;\n    overflow-y: auto;\n    overflow-x: hidden;\n    touch-action: pan-x pan-y;\n    -webkit-overflow-scrolling: touch;\n    font-family: \"MyriadPro\", sans-serif;\n    font-size: 27px;\n    @media screen and (max-width: 500px) {\n      font-size: 24px;\n    }\n  }\n"]);

  _templateObject$5 = function () {
    return data;
  };

  return data;
}
const globalStyles = css(_templateObject$5());
var GlobalStyles = (() => /*#__PURE__*/React.createElement(Global, {
  styles: globalStyles
}));

function _templateObject$6() {
  const data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  canvas {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    outline: 0;\n  }\n"]);

  _templateObject$6 = function () {
    return data;
  };

  return data;
}
const Container$4 = styled.div(_templateObject$6());
const defaultCanvasProps = {
  shadowMap: true,
  gl: {
    alpha: false
  },
  camera: {
    position: [0, 2, 0],
    near: 0.01,
    far: 100
  }
};
const defaultPhysicsProps = {
  iterations: 20,
  size: 10,
  allowSleep: false,
  defaultContactMaterial: {
    friction: 0
  }
};

/**
 *
 * Standard environment should be your first choice for an environment
 *
 * Player Type: First Person w/ WASD, Joystick controls
 * Physics: Enabled with default y=0 floor plane
 * Loading Screen: Spaces Edition
 * Pause Menu: Spaces Edition
 *
 */
const StandardEnvironment = props => {
  const {
    children,
    canvasProps,
    physicsProps,
    player,
    disableGround,
    disableEffects
  } = props;
  const state = useEnvironmentState();
  return /*#__PURE__*/React.createElement(BrowserChecker, null, /*#__PURE__*/React.createElement(GlobalStyles, null), /*#__PURE__*/React.createElement(Container$4, {
    ref: state.containerRef
  }, /*#__PURE__*/React.createElement(Canvas, _extends({}, defaultCanvasProps, canvasProps), /*#__PURE__*/React.createElement(Physics, _extends({}, defaultPhysicsProps, physicsProps), /*#__PURE__*/React.createElement(environmentStateContext.Provider, {
    value: state
  }, /*#__PURE__*/React.createElement(Player, {
    initPos: player == null ? void 0 : player.pos,
    initRot: player == null ? void 0 : player.rot
  }), !disableGround && /*#__PURE__*/React.createElement(InfinitePlane, {
    height: -0.001
  }), !disableEffects && /*#__PURE__*/React.createElement(RealisticEffects, null), children))), /*#__PURE__*/React.createElement(environmentStateContext.Provider, {
    value: state
  }, /*#__PURE__*/React.createElement(LoadingScreen, null), /*#__PURE__*/React.createElement(DesktopPause, null), isMobile && /*#__PURE__*/React.createElement(MobilePause, null), /*#__PURE__*/React.createElement(Crosshair, null))));
};

function _templateObject4$1() {
  const data = _taggedTemplateLiteralLoose(["\n  position: fixed;\n  bottom: 5vh;\n  color: black;\n  font-size: 1.5rem;\n  cursor: pointer;\n  :hover {\n    text-decoration: underline;\n  }\n  transition: opacity 1s ease;\n  transition-delay: 2s;\n\n  @media screen and (max-width: 650px) {\n    font-size: 1rem;\n  }\n"]);

  _templateObject4$1 = function () {
    return data;
  };

  return data;
}

function _templateObject3$3() {
  const data = _taggedTemplateLiteralLoose(["\n  padding: 0.5rem 0.5rem 0.5rem 0.5rem;\n  background-image: linear-gradient(120deg, magenta, #5b328d);\n  background-size: 120% 120%;\n  background-position: top left;\n  border-radius: 5px;\n  transition: opacity 1s ease, background-position 0.3s linear;\n  margin-bottom: 20px;\n\n  &:hover,\n  &:active {\n    background-position: bottom right;\n  }\n"]);

  _templateObject3$3 = function () {
    return data;
  };

  return data;
}

function _templateObject2$3() {
  const data = _taggedTemplateLiteralLoose(["\n  color: white;\n  font-size: 4rem;\n  font-weight: bold;\n  outline: none;\n  height: auto;\n  width: auto;\n  padding: 20px 20px 20px 20px;\n  transition: opacity 1s ease;\n  transition-delay: 0.5s;\n  border-radius: 5px;\n  background-color: transparent;\n  cursor: pointer;\n  border: none;\n  font-family: \"Lato\", sans-serif;\n\n  @media screen and (max-width: 650px) {\n    font-size: 2rem;\n  }\n"]);

  _templateObject2$3 = function () {
    return data;
  };

  return data;
}

function _templateObject$7() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 200;\n  background: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  font-family: \"Lato\", sans-serif;\n\n  transition: opacity 0.7s ease;\n  ", "\n  ", "\n"]);

  _templateObject$7 = function () {
    return data;
  };

  return data;
}
const Container$5 = styled$1.div(_templateObject$7(), props => props.finished && "opacity: 0;", props => props.finished && "pointer-events: none;");
const Begin = styled$1.button(_templateObject2$3());
const BeginBackground = styled$1.div(_templateObject3$3());
const AlternateStart = styled$1.div(_templateObject4$1());

const Transition = props => {
  const {
    start,
    beginExperience,
    selfExplore
  } = props;
  return /*#__PURE__*/React.createElement(Container$5, {
    finished: start
  }, /*#__PURE__*/React.createElement(BeginBackground, null, /*#__PURE__*/React.createElement(Begin, {
    onClick: beginExperience
  }, "Experience")), /*#__PURE__*/React.createElement(AlternateStart, {
    onClick: selfExplore
  }, "Or, Explore on Your Own"));
};

function _templateObject2$4() {
  const data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  z-index: 2;\n  perspective: 500px;\n  -moz-perspective: 500px;\n  -webkit-perspective: 500px;\n\n  & > i {\n    display: block;\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    border-radius: 8px;\n    opacity: 0;\n    background: rgba(255, 0, 255, 0.5);\n    box-shadow: 0px 0px 10px white;\n    animation-name: ", ";\n    animation-duration: 3s;\n    animation-iteration-count: infinite;\n    animation-timing-function: ease-in-out;\n  }\n\n  & i:nth-of-type(1) {\n    transform: rotate(11.6129deg) translate3d(80px, 0, 0);\n    animation-delay: 0.04839s;\n  }\n\n  i:nth-of-type(2) {\n    transform: rotate(23.22581deg) translate3d(80px, 0, 0);\n    animation-delay: 0.09677s;\n  }\n\n  i:nth-of-type(3) {\n    transform: rotate(34.83871deg) translate3d(80px, 0, 0);\n    animation-delay: 0.14516s;\n  }\n\n  i:nth-of-type(4) {\n    transform: rotate(46.45161deg) translate3d(80px, 0, 0);\n    animation-delay: 0.19355s;\n  }\n\n  i:nth-of-type(5) {\n    transform: rotate(58.06452deg) translate3d(80px, 0, 0);\n    animation-delay: 0.24194s;\n  }\n\n  i:nth-of-type(6) {\n    transform: rotate(69.67742deg) translate3d(80px, 0, 0);\n    animation-delay: 0.29032s;\n  }\n\n  i:nth-of-type(7) {\n    transform: rotate(81.29032deg) translate3d(80px, 0, 0);\n    animation-delay: 0.33871s;\n  }\n\n  i:nth-of-type(8) {\n    transform: rotate(92.90323deg) translate3d(80px, 0, 0);\n    animation-delay: 0.3871s;\n  }\n\n  i:nth-of-type(9) {\n    transform: rotate(104.51613deg) translate3d(80px, 0, 0);\n    animation-delay: 0.43548s;\n  }\n\n  i:nth-of-type(10) {\n    transform: rotate(116.12903deg) translate3d(80px, 0, 0);\n    animation-delay: 0.48387s;\n  }\n\n  i:nth-of-type(11) {\n    transform: rotate(127.74194deg) translate3d(80px, 0, 0);\n    animation-delay: 0.53226s;\n  }\n\n  i:nth-of-type(12) {\n    transform: rotate(139.35484deg) translate3d(80px, 0, 0);\n    animation-delay: 0.58065s;\n  }\n\n  i:nth-of-type(13) {\n    transform: rotate(150.96774deg) translate3d(80px, 0, 0);\n    animation-delay: 0.62903s;\n  }\n\n  i:nth-of-type(14) {\n    transform: rotate(162.58065deg) translate3d(80px, 0, 0);\n    animation-delay: 0.67742s;\n  }\n\n  i:nth-of-type(15) {\n    transform: rotate(174.19355deg) translate3d(80px, 0, 0);\n    animation-delay: 0.72581s;\n  }\n\n  i:nth-of-type(16) {\n    transform: rotate(185.80645deg) translate3d(80px, 0, 0);\n    animation-delay: 0.77419s;\n  }\n\n  i:nth-of-type(17) {\n    transform: rotate(197.41935deg) translate3d(80px, 0, 0);\n    animation-delay: 0.82258s;\n  }\n\n  i:nth-of-type(18) {\n    transform: rotate(209.03226deg) translate3d(80px, 0, 0);\n    animation-delay: 0.87097s;\n  }\n\n  i:nth-of-type(19) {\n    transform: rotate(220.64516deg) translate3d(80px, 0, 0);\n    animation-delay: 0.91935s;\n  }\n\n  i:nth-of-type(20) {\n    transform: rotate(232.25806deg) translate3d(80px, 0, 0);\n    animation-delay: 0.96774s;\n  }\n\n  i:nth-of-type(21) {\n    transform: rotate(243.87097deg) translate3d(80px, 0, 0);\n    animation-delay: 1.01613s;\n  }\n\n  i:nth-of-type(22) {\n    transform: rotate(255.48387deg) translate3d(80px, 0, 0);\n    animation-delay: 1.06452s;\n  }\n\n  i:nth-of-type(23) {\n    transform: rotate(267.09677deg) translate3d(80px, 0, 0);\n    animation-delay: 1.1129s;\n  }\n\n  i:nth-of-type(24) {\n    transform: rotate(278.70968deg) translate3d(80px, 0, 0);\n    animation-delay: 1.16129s;\n  }\n\n  i:nth-of-type(25) {\n    transform: rotate(290.32258deg) translate3d(80px, 0, 0);\n    animation-delay: 1.20968s;\n  }\n\n  i:nth-of-type(26) {\n    transform: rotate(301.93548deg) translate3d(80px, 0, 0);\n    animation-delay: 1.25806s;\n  }\n\n  i:nth-of-type(27) {\n    transform: rotate(313.54839deg) translate3d(80px, 0, 0);\n    animation-delay: 1.30645s;\n  }\n\n  i:nth-of-type(28) {\n    transform: rotate(325.16129deg) translate3d(80px, 0, 0);\n    animation-delay: 1.35484s;\n  }\n\n  i:nth-of-type(29) {\n    transform: rotate(336.77419deg) translate3d(80px, 0, 0);\n    animation-delay: 1.40323s;\n  }\n\n  i:nth-of-type(30) {\n    transform: rotate(348.3871deg) translate3d(80px, 0, 0);\n    animation-delay: 1.45161s;\n  }\n\n  i:nth-of-type(31) {\n    transform: rotate(360deg) translate3d(80px, 0, 0);\n    animation-delay: 1.5s;\n  }\n\n  i:nth-of-type(32) {\n    transform: rotate(371.6129deg) translate3d(80px, 0, 0);\n    animation-delay: 1.54839s;\n  }\n\n  i:nth-of-type(33) {\n    transform: rotate(383.22581deg) translate3d(80px, 0, 0);\n    animation-delay: 1.59677s;\n  }\n\n  i:nth-of-type(34) {\n    transform: rotate(394.83871deg) translate3d(80px, 0, 0);\n    animation-delay: 1.64516s;\n  }\n\n  i:nth-of-type(35) {\n    transform: rotate(406.45161deg) translate3d(80px, 0, 0);\n    animation-delay: 1.69355s;\n  }\n\n  i:nth-of-type(36) {\n    transform: rotate(418.06452deg) translate3d(80px, 0, 0);\n    animation-delay: 1.74194s;\n  }\n\n  i:nth-of-type(37) {\n    transform: rotate(429.67742deg) translate3d(80px, 0, 0);\n    animation-delay: 1.79032s;\n  }\n\n  i:nth-of-type(38) {\n    transform: rotate(441.29032deg) translate3d(80px, 0, 0);\n    animation-delay: 1.83871s;\n  }\n\n  i:nth-of-type(39) {\n    transform: rotate(452.90323deg) translate3d(80px, 0, 0);\n    animation-delay: 1.8871s;\n  }\n\n  i:nth-of-type(40) {\n    transform: rotate(464.51613deg) translate3d(80px, 0, 0);\n    animation-delay: 1.93548s;\n  }\n\n  i:nth-of-type(41) {\n    transform: rotate(476.12903deg) translate3d(80px, 0, 0);\n    animation-delay: 1.98387s;\n  }\n\n  i:nth-of-type(42) {\n    transform: rotate(487.74194deg) translate3d(80px, 0, 0);\n    animation-delay: 2.03226s;\n  }\n\n  i:nth-of-type(43) {\n    transform: rotate(499.35484deg) translate3d(80px, 0, 0);\n    animation-delay: 2.08065s;\n  }\n\n  i:nth-of-type(44) {\n    transform: rotate(510.96774deg) translate3d(80px, 0, 0);\n    animation-delay: 2.12903s;\n  }\n\n  i:nth-of-type(45) {\n    transform: rotate(522.58065deg) translate3d(80px, 0, 0);\n    animation-delay: 2.17742s;\n  }\n\n  i:nth-of-type(46) {\n    transform: rotate(534.19355deg) translate3d(80px, 0, 0);\n    animation-delay: 2.22581s;\n  }\n\n  i:nth-of-type(47) {\n    transform: rotate(545.80645deg) translate3d(80px, 0, 0);\n    animation-delay: 2.27419s;\n  }\n\n  i:nth-of-type(48) {\n    transform: rotate(557.41935deg) translate3d(80px, 0, 0);\n    animation-delay: 2.32258s;\n  }\n\n  i:nth-of-type(49) {\n    transform: rotate(569.03226deg) translate3d(80px, 0, 0);\n    animation-delay: 2.37097s;\n  }\n\n  i:nth-of-type(50) {\n    transform: rotate(580.64516deg) translate3d(80px, 0, 0);\n    animation-delay: 2.41935s;\n  }\n\n  i:nth-of-type(51) {\n    transform: rotate(592.25806deg) translate3d(80px, 0, 0);\n    animation-delay: 2.46774s;\n  }\n\n  i:nth-of-type(52) {\n    transform: rotate(603.87097deg) translate3d(80px, 0, 0);\n    animation-delay: 2.51613s;\n  }\n\n  i:nth-of-type(53) {\n    transform: rotate(615.48387deg) translate3d(80px, 0, 0);\n    animation-delay: 2.56452s;\n  }\n\n  i:nth-of-type(54) {\n    transform: rotate(627.09677deg) translate3d(80px, 0, 0);\n    animation-delay: 2.6129s;\n  }\n\n  i:nth-of-type(55) {\n    transform: rotate(638.70968deg) translate3d(80px, 0, 0);\n    animation-delay: 2.66129s;\n  }\n\n  i:nth-of-type(56) {\n    transform: rotate(650.32258deg) translate3d(80px, 0, 0);\n    animation-delay: 2.70968s;\n  }\n\n  i:nth-of-type(57) {\n    transform: rotate(661.93548deg) translate3d(80px, 0, 0);\n    animation-delay: 2.75806s;\n  }\n\n  i:nth-of-type(58) {\n    transform: rotate(673.54839deg) translate3d(80px, 0, 0);\n    animation-delay: 2.80645s;\n  }\n\n  i:nth-of-type(59) {\n    transform: rotate(685.16129deg) translate3d(80px, 0, 0);\n    animation-delay: 2.85484s;\n  }\n\n  i:nth-of-type(60) {\n    transform: rotate(696.77419deg) translate3d(80px, 0, 0);\n    animation-delay: 2.90323s;\n  }\n\n  i:nth-of-type(61) {\n    transform: rotate(708.3871deg) translate3d(80px, 0, 0);\n    animation-delay: 2.95161s;\n  }\n\n  i:nth-of-type(62) {\n    transform: rotate(720deg) translate3d(80px, 0, 0);\n    animation-delay: 3s;\n  }\n\n  animation-delay: 1s;\n  transition: transform 1.75s ease-out, opacity 1.75s ease-out;\n  ", ";\n  ", ";\n"]);

  _templateObject2$4 = function () {
    return data;
  };

  return data;
}

function _templateObject$8() {
  const data = _taggedTemplateLiteralLoose(["\n    from {\n        opacity: 0.0;\n    }\n    to {\n        opacity: 0.6;\n        transform: translate3d(-4px, -4px, 570px);\n    }\n"]);

  _templateObject$8 = function () {
    return data;
  };

  return data;
}
const spin = keyframes(_templateObject$8());
const Wrapper = styled.div(_templateObject2$4(), spin, props => props.finished && "transform: translate3d(0, 0, 500px)", props => props.finished && "opacity: 0");

const SpinningLoading = props => {
  const {
    progress
  } = props;
  const listElements = [...Array(62)].map((x, ind) => /*#__PURE__*/React.createElement("i", {
    key: ind
  }));
  return /*#__PURE__*/React.createElement(Wrapper, {
    finished: progress === 100
  }, listElements);
};

function _templateObject4$2() {
  const data = _taggedTemplateLiteralLoose(["\n  animation: ", " 6s linear infinite;\n"]);

  _templateObject4$2 = function () {
    return data;
  };

  return data;
}

function _templateObject3$4() {
  const data = _taggedTemplateLiteralLoose(["\n  transition: opacity 1s ease-out;\n  transition-delay: 1.25s;\n  ", "\n"]);

  _templateObject3$4 = function () {
    return data;
  };

  return data;
}

function _templateObject2$5() {
  const data = _taggedTemplateLiteralLoose(["\n  0%, 100% {\n    transform: rotate(-0.35deg) translateZ(66px);\n     opacity: 0.9;\n  }\n  25%, 75% {\n    transform: rotate(0.2deg) translateZ(-10px);\n     opacity: 0.3;\n  }\n  50% {\n    transform: rotate(0.5deg) translateZ(46px);\n    opacity: 0.69;\n  }\n"]);

  _templateObject2$5 = function () {
    return data;
  };

  return data;
}

function _templateObject$9() {
  const data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 201;\n  background: white;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  font-family: \"Lato\", sans-serif;\n  perspective: 500px;\n\n  transition: opacity 1.5s ease;\n  transition-delay: 2.25s;\n  ", "\n  ", "\n"]);

  _templateObject$9 = function () {
    return data;
  };

  return data;
}
const Container$6 = styled.div(_templateObject$9(), props => props.finished && "opacity: 0;", props => props.finished && "pointer-events: none;");
const flickering = keyframes(_templateObject2$5());
const TextContainer = styled.div(_templateObject3$4(), props => props.finished && "opacity: 0;");
const Text$1 = styled.p(_templateObject4$2(), flickering);

const Loading = props => {
  const {
    progress
  } = props;
  return /*#__PURE__*/React.createElement(Container$6, {
    finished: progress === 100
  }, /*#__PURE__*/React.createElement(TextContainer, {
    finished: progress === 1
  }, /*#__PURE__*/React.createElement(Text$1, null, Math.floor(progress))), /*#__PURE__*/React.createElement(SpinningLoading, {
    progress: progress
  }));
};

const PortalLoadingScreen = props => {
  const {
    setFixedPath
  } = props;
  const {
    setPaused
  } = useEnvironment();
  const [start, setStart] = useState(false);

  const beginExperience = () => {
    setPaused(false);
    setStart(true);
  };

  const selfExplore = () => {
    setFixedPath(false);
    beginExperience();
  };

  const progress = useControlledProgress();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Loading, {
    progress: progress
  }), /*#__PURE__*/React.createElement(Transition, {
    start: start,
    beginExperience: beginExperience,
    selfExplore: selfExplore
  }));
};

const fetchAccount = async username => {
  let data;

  try {
    const response = await fetch("https://instagram.com/" + username + "/?__a=1");
    const result = await response.json();
    data = result.graphql.user;
  } catch (error) {
    return error;
  }

  return data;
};

/**
 * Hook to fetch portal from backend gien an ID.
 *
 * If it finds an instagram username it will make network call to fetch instagram
 *
 * Will build assets from network fetch into a modified version of object
 * using the passed in builder function (optional)
 *
 * @param id
 * @param portalBuilder
 */
const usePortal = (id, portalBuilder) => {
  const [result, setResult] = useState();
  const [error, setError] = useState();
  useEffect(() => {
    const fetchData = async () => {
      const localResult = {}; // fetch portal

      try {
        const response = await fetch("https://27m2mbw4h0.execute-api.us-west-1.amazonaws.com/fetch", {
          method: "POST ",
          body: JSON.stringify({
            id
          }),
          headers: {
            "Content-Type": "application/json"
          }
        });
        const result = await response.json();
        Object.assign(localResult, result);
      } catch (err) {
        var _err$data;

        setError(((_err$data = err.data) == null ? void 0 : _err$data.message) || "Could not find portal. Please contact us if the problem persists");
        return;
      }

      if (!localResult) {
        setError("Could not find portal. Please contact us if the problem persists");
        return;
      } // fetch instagram


      const instagramUsername = localResult.instagramUsername;

      if (instagramUsername) {
        try {
          const instagramResponse = await fetchAccount(instagramUsername);
          localResult.instagram = instagramResponse;
        } catch (err) {
          console.error("Failed to fetch @" + instagramUsername);
        }
      }

      setResult(localResult);
    };

    if (!result && !error) {
      fetchData();
    }
  }, [result, error]);
  const builtResult = portalBuilder && result ? portalBuilder(result) : result;
  return {
    result: builtResult,
    error
  };
};

const SHOW_PLAYER_HITBOX$1 = false;

/**
 * Player represents a physics-enabled player in the environment, complete with a
 * control scheme and a physical representation that interacts with other physics-
 * enabled objects.
 *
 * There should only be one player per environment.
 *
 * @constructor
 */
const TrackPlayer = props => {
  const {
    initPos = new Vector3(0, 1, 0),
    initRot = 0
  } = props;
  const {
    camera
  } = useThree();
  const {
    setPlayer
  } = useEnvironment(); // physical body

  const [bodyRef, bodyApi] = useSphere(() => ({
    mass: 500,
    position: initPos.toArray(),
    args: 1,
    fixedRotation: true
  })); // producer

  const position = useRef(new Vector3(0, 0, 0));
  const velocity = useRef(new Vector3(0, 0, 0));
  const lockControls = useRef(false);
  const raycaster = useRef(new Raycaster(new Vector3(), new Vector3(), 0, 3)); // consumer

  const quaternion = useRef(new Quaternion(0, 0, 0, 0)); // rad on y axis

  const controls = useRef(); // setup player

  useEffect(() => {
    // store position and velocity
    bodyApi.position.subscribe(p => {
      position.current.set(p[0], p[1], p[2]);
    });
    bodyApi.velocity.subscribe(v => velocity.current.set(v[0], v[1], v[2]));
    const xLook = initPos.x + 100 * Math.cos(initRot);
    const zLook = initPos.z + 100 * Math.sin(initRot);
    camera == null ? void 0 : camera.lookAt(xLook, initPos.y, zLook);

    if (isMobile) {
      window.addEventListener("click", () => {
        controls.current = new DeviceOrientationControls(camera);
      });
    }

    setPlayer(createPlayerRef(bodyApi, position, velocity, lockControls, raycaster));
  }, []); // update player every frame

  useFrame(({
    clock
  }) => {
    if (isMobile && controls.current) {
      controls.current.update();
    }

    const dist = (22 + 50) / 2;
    const x = dist * Math.cos(clock.getElapsedTime() / 10);
    const z = dist * Math.sin(clock.getElapsedTime() / 10);
    camera.position.set(x, 2, z);
    return;
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, !isMobile && /*#__PURE__*/React.createElement(MouseFPSCamera, {
    quaternion: quaternion,
    position: position
  }), /*#__PURE__*/React.createElement("mesh", {
    ref: bodyRef,
    name: "player"
  }, SHOW_PLAYER_HITBOX$1 ));
};

function _templateObject2$6() {
  const data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  text-align: center;\n  color: red;\n  width: 100%;\n  max-width: 500px;\n  padding: 0 10%;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n"]);

  _templateObject2$6 = function () {
    return data;
  };

  return data;
}

function _templateObject$a() {
  const data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  canvas {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    outline: 0;\n  }\n"]);

  _templateObject$a = function () {
    return data;
  };

  return data;
}
const Container$7 = styled.div(_templateObject$a());
const ErrorText = styled.p(_templateObject2$6());
const defaultCanvasProps$1 = {
  shadowMap: true,
  gl: {
    alpha: false
  },
  camera: {
    position: [0, 2, 0],
    near: 0.01,
    far: 200
  }
};
const defaultPhysicsProps$1 = {
  iterations: 20,
  size: 10,
  allowSleep: false,
  defaultContactMaterial: {
    friction: 0
  }
};

/**
 *
 * Provides an environment that loads a portal based on the url
 *
 * Player Type: First Person on a track or with WASD/Joystick
 * Physics: Enabled with default y=0 floor plane
 * Loading Screen: Spaces Portal Edition
 * Pause Menu: Spaces Edition
 *
 */
const PortalEnvironment = props => {
  const {
    children,
    canvasProps,
    physicsProps,
    children2d,
    portalId,
    portalHandler
  } = props;
  const {
    result,
    error
  } = usePortal(portalId, portalHandler);
  const state = useEnvironmentState();
  const localState = { ...state,
    portal: result
  };
  const [fixedPath, setFixedPath] = useState(true);

  if (error) {
    return /*#__PURE__*/React.createElement(ErrorText, null, error);
  }

  return /*#__PURE__*/React.createElement(BrowserChecker, null, /*#__PURE__*/React.createElement(GlobalStyles, null), /*#__PURE__*/React.createElement(Container$7, {
    ref: state.containerRef
  }, /*#__PURE__*/React.createElement(Canvas, _extends({}, defaultCanvasProps$1, canvasProps), /*#__PURE__*/React.createElement(Physics, _extends({}, defaultPhysicsProps$1, physicsProps), /*#__PURE__*/React.createElement(environmentStateContext.Provider, {
    value: localState
  }, fixedPath ? /*#__PURE__*/React.createElement(TrackPlayer, null) : /*#__PURE__*/React.createElement(TrackPlayer, {
    initPos: new Vector3(0, 2, 53)
  }), children))), /*#__PURE__*/React.createElement(environmentStateContext.Provider, {
    value: localState
  }, children2d, /*#__PURE__*/React.createElement(PortalLoadingScreen, {
    setFixedPath: setFixedPath
  }), /*#__PURE__*/React.createElement(DesktopPause, null), isMobile && /*#__PURE__*/React.createElement(MobilePause, null))));
};

export { PortalEnvironment, StandardEnvironment, environmentStateContext, useControlledProgress, useEnvironment, useEnvironmentState };
import React from "react";