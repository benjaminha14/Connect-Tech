import { extend, useThree, useFrame } from 'react-three-fiber';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass';
import { useRef, useEffect } from 'react';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
import { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader';
import { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';
import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';

extend({
  EffectComposer,
  RenderPass,
  GlitchPass,
  ShaderPass,
  BloomPass
});
const RealisticEffects = () => {
  const {
    gl,
    scene,
    camera,
    size
  } = useThree();
  const gammaCorrection = new ShaderPass(GammaCorrectionShader);
  const fxaaPass = new ShaderPass(FXAAShader);
  const pixelRatio = window ? window.devicePixelRatio : 2; // @ts-ignore

  fxaaPass.material.uniforms["resolution"].value.x = 1 / (window.innerWidth * pixelRatio); // @ts-ignore

  fxaaPass.material.uniforms["resolution"].value.y = 1 / (window.innerHeight * pixelRatio);
  const composer = useRef();
  useEffect(() => {
    var _composer$current;

    return void (composer == null ? void 0 : (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height));
  }, [size]);
  useEffect(() => {
    var _composer$current2, _composer$current3;

    gammaCorrection.renderToScreen = true;
    composer == null ? void 0 : (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.addPass(gammaCorrection);
    fxaaPass.renderToScreen = true;
    composer == null ? void 0 : (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.addPass(fxaaPass);
  }, []);
  useFrame(() => {
    var _composer$current4;

    composer == null ? void 0 : (_composer$current4 = composer.current) == null ? void 0 : _composer$current4.render();
  }, 1);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("effectComposer", {
    ref: composer,
    args: [gl]
  }, /*#__PURE__*/React.createElement("renderPass", {
    attachArray: "passes",
    args: [scene, camera]
  })));
};

export { RealisticEffects };
import React from "react";