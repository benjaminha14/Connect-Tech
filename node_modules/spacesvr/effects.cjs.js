'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactThreeFiber = require('react-three-fiber');
var EffectComposer = require('three/examples/jsm/postprocessing/EffectComposer');
var RenderPass = require('three/examples/jsm/postprocessing/RenderPass');
var GlitchPass = require('three/examples/jsm/postprocessing/GlitchPass');
var react = require('react');
var ShaderPass = require('three/examples/jsm/postprocessing/ShaderPass');
var GammaCorrectionShader = require('three/examples/jsm/shaders/GammaCorrectionShader');
var BloomPass = require('three/examples/jsm/postprocessing/BloomPass');
var FXAAShader = require('three/examples/jsm/shaders/FXAAShader');

reactThreeFiber.extend({
  EffectComposer: EffectComposer.EffectComposer,
  RenderPass: RenderPass.RenderPass,
  GlitchPass: GlitchPass.GlitchPass,
  ShaderPass: ShaderPass.ShaderPass,
  BloomPass: BloomPass.BloomPass
});
var RealisticEffects = function RealisticEffects() {
  var _useThree = reactThreeFiber.useThree(),
      gl = _useThree.gl,
      scene = _useThree.scene,
      camera = _useThree.camera,
      size = _useThree.size;

  var gammaCorrection = new ShaderPass.ShaderPass(GammaCorrectionShader.GammaCorrectionShader);
  var fxaaPass = new ShaderPass.ShaderPass(FXAAShader.FXAAShader);
  var pixelRatio = window ? window.devicePixelRatio : 2; // @ts-ignore

  fxaaPass.material.uniforms["resolution"].value.x = 1 / (window.innerWidth * pixelRatio); // @ts-ignore

  fxaaPass.material.uniforms["resolution"].value.y = 1 / (window.innerHeight * pixelRatio);
  var composer = react.useRef();
  react.useEffect(function () {
    var _composer$current;

    return void (composer == null ? void 0 : (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height));
  }, [size]);
  react.useEffect(function () {
    var _composer$current2, _composer$current3;

    gammaCorrection.renderToScreen = true;
    composer == null ? void 0 : (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.addPass(gammaCorrection);
    fxaaPass.renderToScreen = true;
    composer == null ? void 0 : (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.addPass(fxaaPass);
  }, []);
  reactThreeFiber.useFrame(function () {
    var _composer$current4;

    composer == null ? void 0 : (_composer$current4 = composer.current) == null ? void 0 : _composer$current4.render();
  }, 1);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("effectComposer", {
    ref: composer,
    args: [gl]
  }, /*#__PURE__*/React.createElement("renderPass", {
    attachArray: "passes",
    args: [scene, camera]
  })));
};

exports.RealisticEffects = RealisticEffects;
import React from "react";