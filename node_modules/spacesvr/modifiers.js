import { useContext, createContext, useRef, useState, useEffect } from 'react';
import '@react-three/drei';
import { useFrame } from 'react-three-fiber';

const environmentStateContext = /*#__PURE__*/createContext({});
function useEnvironment() {
  return useContext(environmentStateContext);
}

/**
 *
 * Interactible adds on click and hover methods to any group of Object3D's
 *
 * @param props
 * @constructor
 */
const Interactable = props => {
  const {
    children,
    onClick,
    onHover,
    onUnHover
  } = props;
  const {
    player
  } = useEnvironment();
  const {
    raycaster
  } = player;
  const group = useRef();
  const [hovered, setHovered] = useState(false);
  useFrame(() => {
    if (group.current && raycaster) {
      const intersections = raycaster.intersectObject(group.current, true);

      if (intersections && intersections.length > 0) {
        if (!hovered) {
          setHovered(true);

          if (onHover) {
            onHover();
          }
        }
      } else if (hovered) {
        setHovered(false);

        if (onUnHover) {
          onUnHover();
        }
      }
    }
  });
  useEffect(() => {
    const checkClick = () => {
      if (hovered && onClick) {
        onClick();
      }
    };

    document.addEventListener("click", checkClick);
    return () => {
      document.removeEventListener("click", checkClick);
    };
  }, [hovered, onClick]);
  return /*#__PURE__*/React.createElement("group", {
    ref: group
  }, children);
};

const Floating = props => {
  const {
    children,
    height = 0.2,
    speed = 1
  } = props;
  const group = useRef();
  const seed = useRef(Math.random());
  useFrame(({
    clock
  }) => {
    if (group.current) {
      group.current.position.y = height * Math.sin(clock.getElapsedTime() * speed * 0.4 + seed.current * 10000);
    }
  });
  return /*#__PURE__*/React.createElement("group", {
    ref: group
  }, children);
};

export { Floating, Interactable };
import React from "react";